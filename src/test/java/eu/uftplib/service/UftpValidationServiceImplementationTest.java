/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package eu.uftplib.service;

import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.stream.Collectors;

import static org.junit.Assert.*;

public class UftpValidationServiceImplementationTest {

    @Test
    public void testMessageWhenValid() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestMessageCorrect.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNotNull("validateXml should return a domain", domain);
    }

    @Test
    public void testMessageWhenIncorrectISPDuration() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestMessageIncorrectISPDuration.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNull("validateXml should return a domain", domain);
    }

    @Test
    public void testMessageWhenIncorrectTimeZone() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestMessageIncorrectTimezone.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNull("validateXml should return a domain", domain);
    }

    @Test
    public void testAGRPortfolioUpdateWhenValid() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestAGRPortfolioUpdate_Correct.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNotNull("validateXml should return a domain", domain);
    }

    @Test
    public void testDSOPortfolioUpdateResponse() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestDSOPortfolioUpdateResponse_AcceptedCorrect.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("DSO");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNull("validateXml should return a domain", domain);
    }

    @Test
    public void testDPrognosisAsAGR() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestD-Prognosis.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNotNull("validateXml should return a domain", domain);
    }

    @Test
    public void testDPrognosisAsDSO() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestD-Prognosis.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("DSO");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNotNull("validateXml should return a domain", domain);
    }

    @Test
    public void testDPrognosisAsCRO() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestD-Prognosis.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("CRO");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNull("validateXml should return a domain", domain);
    }


    @Test
    public void testDPrognosis2() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestD-Prognosis2.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNotNull("validateXml should return a domain", domain);
    }

    @Test
    public void testDPrognosisResponse() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestD-PrognosisResponse.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNotNull("validateXml should return a domain", domain);
    }

    @Test
    public void testDPrognosisResponse2() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestD-PrognosisResponse2.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNotNull("validateXml should return a domain", domain);
    }
    
    @Test
    public void testFlexOffer() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestFlexOffer.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNull("validateXml should return a domain", domain);
    }

    @Test
    public void testFlexOfferResponse() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestFlexOfferResponse.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNotNull("validateXml should return a domain", domain);
    }

    @Test
    public void testFlexOrder() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestFlexOrder.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNotNull("validateXml should return a domain", domain);
    }

    @Test
    public void testFlexOrderResponse() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestFlexOrderResponse.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNotNull("validateXml should return a domain", domain);
    }

    @Test
    public void testFlexRequest() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestFlexRequest.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNotNull("validateXml should return a domain", domain);
    }

    @Test
    public void testFlexRequestResponse() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestFlexRequestResponse.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNotNull("validateXml should return a domain", domain);
    }

    @Test
    public void testFlexSettlement() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestFlexSettlement.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNull("validateXml should return a domain", domain);
    }

    @Test
    public void testFlexSettlementResponse() throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/test/java/eu/uftplib/input/TestFlexSettlementResponse.XML"));
        String content = br.lines().collect(Collectors.joining("\n"));
        br.close();
        var uftpValidationServiceImplementation = new UftpValidationServiceImplementation("AGR");
        DomainPair domain = uftpValidationServiceImplementation.validateXml(content, MessageDirection.Outgoing);
        assertNotNull("validateXml should return a domain", domain);
    }

}
